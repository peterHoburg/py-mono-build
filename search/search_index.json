{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Installation \u00b6 pip install py-mono-tools Installing extras \u00b6 Install all extras pip install py-mono-tools[all] Install all python extras pip install py-mono-tools[python] Install specific extras pip install py-mono-tools[python_linters] pip install py-mono-tools[python_testers] NOTE: Docker is REQUIRED to run any of the Terraform linters, or use the Docker backend. Basic Usage \u00b6 CONF in current directory pmt lint Relative path to CONF pmt -rp ./src/example_module lint Absolute path to CONF pmt -ap /home/user/src/example_module lint Name in CONF (CONF must be in current/child directory) pmt -n example_name lint","title":"Home"},{"location":"#installation","text":"pip install py-mono-tools","title":"Installation"},{"location":"#installing-extras","text":"Install all extras pip install py-mono-tools[all] Install all python extras pip install py-mono-tools[python] Install specific extras pip install py-mono-tools[python_linters] pip install py-mono-tools[python_testers] NOTE: Docker is REQUIRED to run any of the Terraform linters, or use the Docker backend.","title":"Installing extras"},{"location":"#basic-usage","text":"CONF in current directory pmt lint Relative path to CONF pmt -rp ./src/example_module lint Absolute path to CONF pmt -ap /home/user/src/example_module lint Name in CONF (CONF must be in current/child directory) pmt -n example_name lint","title":"Basic Usage"},{"location":"cli/","text":"pmt \u00b6 Py mono tool is a CLI tool that simplifies using python in a monorepo. Usage: pmt [OPTIONS] COMMAND [ARGS]... Options: --backend TEXT Default backend is \"system\". This can be set via this flag, the BACKEND var in CONF, or defaulted to system. -ap, --absolute_path PATH -rp, --relative_path PATH -n, --name TEXT Name as defined in CONF NAME=... -v, --verbose -s, --silent -mo, --machine_output --help Show this message and exit. Subcommands deploy : Run the specified build and deploy in the specific CONF file. interactive : Drop into an interactive session in your specified backend. lint : list : List all CONF file names and relative paths. test : Run all the tests specified in the CONF file. pmt deploy \u00b6 Run the specified build and deploy in the specific CONF file. Usage: pmt deploy [OPTIONS] Options: --plan --help Show this message and exit. pmt interactive \u00b6 Drop into an interactive session in your specified backend. Usage: pmt interactive [OPTIONS] Options: --help Show this message and exit. pmt lint \u00b6 Run one or more Linters specified in the CONF file. Examples: pmt lint pmt lint -s black -s flake8 pmt -rp ./some/path lint pmt -n py_mono_tools lint -l python Usage: pmt lint [OPTIONS] Options: --check -s, --specific TEXT Specify one or more linters to run. NOTE: The linter MUST be listed in the respected CONF file. All Linters: ['bandit', 'black', 'checkov', 'flake8', 'isort', 'mccabe', 'mypy', 'pip-audit', 'py_doc_string_formatter', 'pydocstyle', 'pyflakes', 'pylint', 'tflint', 'tfsec', 'terraform_fmt', 'terrascan_docker', 'terrascan_terraform'] -ff, --fail_fast Stop on first failure. --show_success Show successful outputs --parallel NOT IMPLEMENTED Runs all linters marked with parallel_run=True at the same time NOTE: All linters labeled as parallel_run=False will be run BEFORE ones marked as True. --ignore_linter_weight Ignores linter weight and runs in the order in CONF. -l, --language LANGUAGE Specify a language to run linters for. --help Show this message and exit. pmt list \u00b6 List all CONF file names and relative paths. Usage: pmt list [OPTIONS] Options: --help Show this message and exit. pmt test \u00b6 Run all the tests specified in the CONF file. Usage: pmt test [OPTIONS] Options: --help Show this message and exit.","title":"CLI Reference"},{"location":"cli/#pmt","text":"Py mono tool is a CLI tool that simplifies using python in a monorepo. Usage: pmt [OPTIONS] COMMAND [ARGS]... Options: --backend TEXT Default backend is \"system\". This can be set via this flag, the BACKEND var in CONF, or defaulted to system. -ap, --absolute_path PATH -rp, --relative_path PATH -n, --name TEXT Name as defined in CONF NAME=... -v, --verbose -s, --silent -mo, --machine_output --help Show this message and exit. Subcommands deploy : Run the specified build and deploy in the specific CONF file. interactive : Drop into an interactive session in your specified backend. lint : list : List all CONF file names and relative paths. test : Run all the tests specified in the CONF file.","title":"pmt"},{"location":"cli/#pmt-deploy","text":"Run the specified build and deploy in the specific CONF file. Usage: pmt deploy [OPTIONS] Options: --plan --help Show this message and exit.","title":"deploy"},{"location":"cli/#pmt-interactive","text":"Drop into an interactive session in your specified backend. Usage: pmt interactive [OPTIONS] Options: --help Show this message and exit.","title":"interactive"},{"location":"cli/#pmt-lint","text":"Run one or more Linters specified in the CONF file. Examples: pmt lint pmt lint -s black -s flake8 pmt -rp ./some/path lint pmt -n py_mono_tools lint -l python Usage: pmt lint [OPTIONS] Options: --check -s, --specific TEXT Specify one or more linters to run. NOTE: The linter MUST be listed in the respected CONF file. All Linters: ['bandit', 'black', 'checkov', 'flake8', 'isort', 'mccabe', 'mypy', 'pip-audit', 'py_doc_string_formatter', 'pydocstyle', 'pyflakes', 'pylint', 'tflint', 'tfsec', 'terraform_fmt', 'terrascan_docker', 'terrascan_terraform'] -ff, --fail_fast Stop on first failure. --show_success Show successful outputs --parallel NOT IMPLEMENTED Runs all linters marked with parallel_run=True at the same time NOTE: All linters labeled as parallel_run=False will be run BEFORE ones marked as True. --ignore_linter_weight Ignores linter weight and runs in the order in CONF. -l, --language LANGUAGE Specify a language to run linters for. --help Show this message and exit.","title":"lint"},{"location":"cli/#pmt-list","text":"List all CONF file names and relative paths. Usage: pmt list [OPTIONS] Options: --help Show this message and exit.","title":"list"},{"location":"cli/#pmt-test","text":"Run all the tests specified in the CONF file. Usage: pmt test [OPTIONS] Options: --help Show this message and exit.","title":"test"},{"location":"concepts/","text":"CONF File \u00b6 A CONF file tells PMT what to do, where to do it, and any arguments to pass to the underlying goals. A CONF file is a python file that imports from py_mono_tools. Example CONF file that uses the default python linters: #!/user/bin/env python # -*- coding: utf-8 -*- import pathlib from py_mono_tools.goals.linters import DEFAULT_PYTHON path = pathlib.Path(__file__).parent NAME = \"Example\" BACKEND = \"system\" LINT = [ *DEFAULT_PYTHON, ] TEST = [] DEPLOY = [] Example CONF file that specifies 3 python linters, and adds arguments: #!/user/bin/env python # -*- coding: utf-8 -*- import pathlib from py_mono_tools.goals.linters import Black, Flake8, Mypy path = pathlib.Path(__file__).parent NAME = \"Example\" BACKEND = \"system\" LINT = [ Black(args=[\"--line-length=120\"]), Flake8(args=[\"--ignore=E203\", \"--ignore=W503\"]), Mypy(), ] TEST = [] DEPLOY = [] Specify CONF file \u00b6 PMT runs from CONF files. There are 4 ways to specify which CONF file PMT should use. Current directory \u00b6 pmt ... Runs PMT in the current directory. Relative path \u00b6 pmt -rp <relative_path> ... Relative path allows you to run PMT from any directory and have it execute in a sub/parent directory. Absolute path \u00b6 pmt -ap <absolute_path> ... Absolute Path. The user running PMT must have read/write access to the directory specified by the absolute path. CONF file name \u00b6 pmt -n <NAME_in_CONF_file> ... The -n takes the NAME = \"<name>\" variable specified in the CONF file. PMT searches for CONF file names ONLY when the -n flag is used. NOTE: ONLY the current and child directories will be searched for CONF file NAMEs! Required Variables \u00b6 There are 4 required variables in a CONF file. These can be left as a default value (as seen below), and nothing will be run. NAME = \"\" LINT: list[type(Linter)] = [] TEST = [] DEPLOY = [] NAME \u00b6 pmt -n <NAME> lint -s black NAME tells PMT what CONF file to run if you execute PMT using a name. LINT \u00b6 pmt lint The LINT variable is a list of goals that inherit from the py_mono_tools.goals.interface.Linter class. TEST \u00b6 DEPLOY \u00b6 Optional Variables \u00b6 Optionally: ```python PATH = \"\" BACKEND = \"\" PATH \u00b6 BACKEND \u00b6 Backends \u00b6 The PMT backend is what takes the goal and runs it. The backend could be the local system or Docker. The Backend defaults to system . It can be set using the pmt --backend flag, or BACKEND = \"<system,docker>\" in a CONF file. Goals \u00b6 LINT \u00b6 A linter is a class that inherits from py_mono_tools.goals.interface.Linter ABC. Linters can do many things. Check formatting (black), check for unused imports (flake8), check for type hints (mypy), etc. Some linters may change the code (black), while others just check for errors (flake8). Passing the --check flag will force all inters to only check, and not change anything. Please see the CLI Reference section for more details .","title":"Concepts"},{"location":"concepts/#conf-file","text":"A CONF file tells PMT what to do, where to do it, and any arguments to pass to the underlying goals. A CONF file is a python file that imports from py_mono_tools. Example CONF file that uses the default python linters: #!/user/bin/env python # -*- coding: utf-8 -*- import pathlib from py_mono_tools.goals.linters import DEFAULT_PYTHON path = pathlib.Path(__file__).parent NAME = \"Example\" BACKEND = \"system\" LINT = [ *DEFAULT_PYTHON, ] TEST = [] DEPLOY = [] Example CONF file that specifies 3 python linters, and adds arguments: #!/user/bin/env python # -*- coding: utf-8 -*- import pathlib from py_mono_tools.goals.linters import Black, Flake8, Mypy path = pathlib.Path(__file__).parent NAME = \"Example\" BACKEND = \"system\" LINT = [ Black(args=[\"--line-length=120\"]), Flake8(args=[\"--ignore=E203\", \"--ignore=W503\"]), Mypy(), ] TEST = [] DEPLOY = []","title":"CONF File"},{"location":"concepts/#specify-conf-file","text":"PMT runs from CONF files. There are 4 ways to specify which CONF file PMT should use.","title":"Specify CONF file"},{"location":"concepts/#current-directory","text":"pmt ... Runs PMT in the current directory.","title":"Current directory"},{"location":"concepts/#relative-path","text":"pmt -rp <relative_path> ... Relative path allows you to run PMT from any directory and have it execute in a sub/parent directory.","title":"Relative path"},{"location":"concepts/#absolute-path","text":"pmt -ap <absolute_path> ... Absolute Path. The user running PMT must have read/write access to the directory specified by the absolute path.","title":"Absolute path"},{"location":"concepts/#conf-file-name","text":"pmt -n <NAME_in_CONF_file> ... The -n takes the NAME = \"<name>\" variable specified in the CONF file. PMT searches for CONF file names ONLY when the -n flag is used. NOTE: ONLY the current and child directories will be searched for CONF file NAMEs!","title":"CONF file name"},{"location":"concepts/#required-variables","text":"There are 4 required variables in a CONF file. These can be left as a default value (as seen below), and nothing will be run. NAME = \"\" LINT: list[type(Linter)] = [] TEST = [] DEPLOY = []","title":"Required Variables"},{"location":"concepts/#name","text":"pmt -n <NAME> lint -s black NAME tells PMT what CONF file to run if you execute PMT using a name.","title":"NAME"},{"location":"concepts/#lint","text":"pmt lint The LINT variable is a list of goals that inherit from the py_mono_tools.goals.interface.Linter class.","title":"LINT"},{"location":"concepts/#test","text":"","title":"TEST"},{"location":"concepts/#deploy","text":"","title":"DEPLOY"},{"location":"concepts/#optional-variables","text":"Optionally: ```python PATH = \"\" BACKEND = \"\"","title":"Optional Variables"},{"location":"concepts/#path","text":"","title":"PATH"},{"location":"concepts/#backend","text":"","title":"BACKEND"},{"location":"concepts/#backends","text":"The PMT backend is what takes the goal and runs it. The backend could be the local system or Docker. The Backend defaults to system . It can be set using the pmt --backend flag, or BACKEND = \"<system,docker>\" in a CONF file.","title":"Backends"},{"location":"concepts/#goals","text":"","title":"Goals"},{"location":"concepts/#lint_1","text":"A linter is a class that inherits from py_mono_tools.goals.interface.Linter ABC. Linters can do many things. Check formatting (black), check for unused imports (flake8), check for type hints (mypy), etc. Some linters may change the code (black), while others just check for errors (flake8). Passing the --check flag will force all inters to only check, and not change anything. Please see the CLI Reference section for more details .","title":"LINT"}]}